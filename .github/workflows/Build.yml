name: Simplified Build
run-name: ${{ github.event.inputs.release == 'true' && 'Release' || 'Build' }} for ${{ github.event.inputs.ipa_url }}

on:
  workflow_dispatch:
    inputs:
      use_cached_builds:
        description: "Use cached DEB if available (uncheck to force rebuild)"
        required: true
        type: boolean
        default: true
      ipa_source_type:
        description: "Source type for IPA file"
        required: true
        type: choice
        options:
          - direct_url
          - google_drive
        default: "direct_url"
      ipa_url:
        description: "Direct link to the decrypted IPA or Google Drive share link"
        required: true
        type: string
      icon_choice:
        description: "Icon to use for bound.ipa"
        required: true
        type: choice
        options:
          - bound_icon
          - fallback_icon
        default: "bound_icon"
      release:
        description: "Release the build"
        required: true
        type: boolean
      release_name:
        description: "Custom release name"
        required: false
        type: string
        default: ""
      tag_name:
        description: "Custom tag name (defaults to vDISCORD_VERSION)"
        required: false
        type: string
        default: ""
      release_body:
        description: "Custom release description"
        required: false
        type: string
        default: "Download the latest stable version here."

jobs:
  # Build the tweak DEB file
  build-tweak:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      # Try downloading existing DEB to save build time
      - name: Download existing DEB
        id: download_deb
        if: inputs.use_cached_builds == true
        run: |
          set +e
          release_info=$(gh api repos/${{ github.repository }}/releases/latest 2>/dev/null)
          if [ $? -eq 0 ]; then
            release_version=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("iphoneos-arm64.deb")) | .name' | grep -o '_[0-9.]\+_' | tr -d '_')
            control_version=$(grep '^Version:' control | cut -d ' ' -f 2)
            
            if [ "$release_version" = "$control_version" ]; then
              echo "Versions match - downloading existing DEB..."
              echo "$release_info" | jq -r '.assets[] | select(.name | endswith("arm64.deb")) | .browser_download_url' | xargs -I {} curl -L -O {}
              echo "deb_downloaded=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "deb_downloaded=false" >> $GITHUB_OUTPUT
          set -e
        env:
          GH_TOKEN: ${{ github.token }}

      # Build DEB if not downloaded - set up Theos environment
      - name: Setup Theos
        if: steps.download_deb.outputs.deb_downloaded != 'true'
        uses: Randomblock1/theos-action@v1

      # Build the DEB package
      - name: Build DEB
        if: steps.download_deb.outputs.deb_downloaded != 'true'
        run: |
          make package
          if [ $? -ne 0 ]; then
            echo "::error::Failed to build DEB package"
            exit 1
          fi

      - name: Upload DEB
        uses: actions/upload-artifact@v4
        with:
          name: btloader-deb
          path: |
            *-arm64.deb
            packages/*-arm64.deb

  # Download the Discord IPA
  download-ipa:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.download.outputs.success }}
    steps:
      - name: Download IPA
        id: download
        run: |
          # Direct URL download
          if [ "${{ github.event.inputs.ipa_source_type }}" = "direct_url" ]; then
            echo "Downloading from direct URL..."
            curl -L -o discord_original.ipa "${{ github.event.inputs.ipa_url }}" --fail
            if [ $? -ne 0 ]; then
              echo "::error::Failed to download IPA from direct URL"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          # Google Drive download - supports various URL formats including your example
          if [ "${{ github.event.inputs.ipa_source_type }}" = "google_drive" ]; then
            echo "Downloading from Google Drive..."
            pip install gdown
            
            # Extract file ID from Google Drive URL (supports multiple formats)
            URL="${{ github.event.inputs.ipa_url }}"
            if [[ "$URL" =~ drive\.google\.com/file/d/([^/]+) ]]; then
              FILE_ID="${BASH_REMATCH[1]}"
              echo "Extracted file ID: $FILE_ID"
              gdown "$FILE_ID" -O discord_original.ipa --no-cookies
            elif [[ "$URL" =~ [?\&]id=([^\&]+) ]]; then
              FILE_ID=$(echo "$URL" | sed -n 's/.*[?\&]id=\([^\&]*\).*/\1/p')
              echo "Extracted file ID from query: $FILE_ID"
              gdown "$FILE_ID" -O discord_original.ipa --no-cookies
            else
              # Try fuzzy download for other formats
              echo "Trying fuzzy download..."
              gdown --fuzzy "$URL" -O discord_original.ipa
            fi
            
            if [ $? -ne 0 ] || [ ! -f "discord_original.ipa" ]; then
              echo "::error::Failed to download IPA from Google Drive"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Verify it's a valid IPA (zip file)
            if ! file discord_original.ipa | grep -q "Zip archive"; then
              echo "::error::Downloaded file is not a valid IPA"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "IPA downloaded successfully"
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Upload original IPA
        if: steps.download.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: original-ipa
          path: discord_original.ipa

  # Build the final IPAs using cyan
  build-ipas:
    needs: [build-tweak, download-ipa]
    if: needs.download-ipa.outputs.success == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download all artifacts (DEB and original IPA)
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Install cyan (pyzule-rw) - the new injection tool
      - name: Install cyan
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install "https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip" Pillow
          
          # Verify installation
          cyan --help
          
          # Make venv available for subsequent steps
          echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
          echo "$PWD/venv/bin" >> $GITHUB_PATH

      # Download Bound icon for themed version
      - name: Download Bound icon
        id: icon
        run: |
          icon_downloaded=false
          
          # Only try to download if user chose bound_icon
          if [ "${{ github.event.inputs.icon_choice }}" = "bound_icon" ]; then
            # Try multiple icon sources in case one fails
            for url in \
              "https://raw.githubusercontent.com/CloudySn0w/BTLoader/main/assets/logo/icon.png" \
              "https://github.com/CloudySn0w/BTLoader/raw/main/assets/logo/icon.png" \
              "https://raw.githubusercontent.com/CloudySn0w/BTLoader/bd527e2/assets/logo/icon.png"
            do
              echo "Trying icon source: $url"
              if curl -L -o bound_icon.png "$url" && [ -s bound_icon.png ]; then
                # Verify it's a valid PNG using Python
                if python3 -c "from PIL import Image; Image.open('bound_icon.png')" 2>/dev/null; then
                  echo "Icon downloaded and verified successfully"
                  icon_downloaded=true
                  break
                fi
              fi
            done
          fi
          
          # Create fallback icon if download failed OR user chose fallback_icon
          if [ "$icon_downloaded" = "false" ] || [ "${{ github.event.inputs.icon_choice }}" = "fallback_icon" ]; then
            echo "Creating fallback icon..."
            python3 -c "from PIL import Image, ImageDraw; img = Image.new('RGB', (512, 512), color=(0, 120, 212)); draw = ImageDraw.Draw(img); draw.ellipse((128, 128, 384, 384), fill=(255, 255, 255)); img.save('bound_icon.png')"
            icon_downloaded=true
          fi
          
          echo "icon_available=$icon_downloaded" >> $GITHUB_OUTPUT

      # Find the DEB file to inject
      - name: Find DEB file
        id: deb
        run: |
          DEB_FILE=$(find . -name "*-arm64.deb" | head -1)
          if [ -z "$DEB_FILE" ]; then
            echo "::error::No DEB file found"
            exit 1
          fi
          echo "Found DEB file: $DEB_FILE"
          echo "deb_path=$DEB_FILE" >> $GITHUB_OUTPUT

      # Create bound.ipa (themed version with Bound name and chosen icon)
      - name: Create bound.ipa
        run: |
          icon_type="${{ github.event.inputs.icon_choice }}"
          echo "Creating bound.ipa with Bound theme using $icon_type..."
          cyan -n "Bound" \
            -k bound_icon.png \
            -i discord_original.ipa \
            -o bound.ipa \
            -f "${{ steps.deb.outputs.deb_path }}" \
            -uwsgq
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to create bound.ipa"
            exit 1
          fi

      # Create discord.ipa (unthemed version keeping original Discord name)
      - name: Create discord.ipa  
        run: |
          echo "Creating discord.ipa (unthemed)..."
          cyan -n "Discord" \
            -i discord_original.ipa \
            -o discord.ipa \
            -f "${{ steps.deb.outputs.deb_path }}" \
            -uwsgq
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to create discord.ipa"
            exit 1
          fi

      # Extract version information for release
      - name: Extract versions
        id: version
        run: |
          # Extract Discord version from the IPA
          unzip -q bound.ipa
          VERSION=$(plutil -p Payload/*/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
          TWEAK_VERSION=$(grep '^Version:' control | cut -d ' ' -f 2)
          echo "discord_version=$VERSION" >> $GITHUB_OUTPUT
          echo "tweak_version=$TWEAK_VERSION" >> $GITHUB_OUTPUT
          echo "Discord version: $VERSION, Tweak version: $TWEAK_VERSION"
          rm -rf Payload

      # Upload the final IPAs
      - name: Upload bound.ipa
        uses: actions/upload-artifact@v4
        with:
          name: bound-ipa
          path: bound.ipa

      - name: Upload discord.ipa
        uses: actions/upload-artifact@v4
        with:
          name: discord-ipa  
          path: discord.ipa

    outputs:
      discord_version: ${{ steps.version.outputs.discord_version }}
      tweak_version: ${{ steps.version.outputs.tweak_version }}

  # Create GitHub release if requested
  release:
    if: github.event.inputs.release == 'true'
    needs: [build-ipas]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download all build artifacts for release
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Create the GitHub release
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_name || format('v{0}', needs.build-ipas.outputs.discord_version) }}
          name: ${{ github.event.inputs.release_name || format('BTLoader v{0} (Discord v{1})', needs.build-ipas.outputs.tweak_version, needs.build-ipas.outputs.discord_version) }}
          body: |
            ${{ github.event.inputs.release_body }}
            
            ## Downloads
            
            - **bound.ipa**: BTLoader with Bound name and icon
            - **discord.ipa**: BTLoader with original Discord name and icon
            - **DEB**: Rootless package for jailbroken devices
            
            ## Versions
            
            - Discord: v${{ needs.build-ipas.outputs.discord_version }}
            - BTLoader: v${{ needs.build-ipas.outputs.tweak_version }}
            
            ## Features
            
            - TrollStore compatibility  
            - Optimized for size and performance
          files: |
            bound.ipa
            discord.ipa
            **/*-arm64.deb
          generate_release_notes: false
          token: ${{ github.token }}
